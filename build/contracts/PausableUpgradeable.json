{
  "contractName": "PausableUpgradeable",
  "abi": [
    {
      "constant": false,
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "initialized",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "target",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "newTarget",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "oldTarget",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "EventUpgrade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "target",
          "type": "address"
        }
      ],
      "name": "EventInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Pause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Unpause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipRenounced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x608060405260008054600160a860020a031916331790556104f8806100256000396000f3006080604052600436106100a35763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633659cfe681146100a85780633f4ba83a146100cb5780635c975abb146100e0578063715018a6146101095780638129fc1c1461011e5780638456cb59146101335780638da5cb5b14610148578063cbca47db14610179578063d4b839921461019a578063f2fde38b146101af575b600080fd5b3480156100b457600080fd5b506100c9600160a060020a03600435166101d0565b005b3480156100d757600080fd5b506100c96101d5565b3480156100ec57600080fd5b506100f561025c565b604080519115158252519081900360200190f35b34801561011557600080fd5b506100c961027d565b34801561012a57600080fd5b506100c96102e9565b34801561013f57600080fd5b506100c9610364565b34801561015457600080fd5b5061015d610401565b60408051600160a060020a039092168252519081900360200190f35b34801561018557600080fd5b506100f5600160a060020a0360043516610410565b3480156101a657600080fd5b5061015d610425565b3480156101bb57600080fd5b506100c9600160a060020a0360043516610434565bfe5b50565b600054600160a060020a031633146101ec57600080fd5b60005474010000000000000000000000000000000000000000900460ff16151561021557600080fd5b6000805474ff0000000000000000000000000000000000000000191681556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b339190a1565b60005474010000000000000000000000000000000000000000900460ff1681565b600054600160a060020a0316331461029457600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600154600160a060020a031660009081526002602052604090205460ff1615156100a35760018054600160a060020a03908116600090815260026020526040808220805460ff1916851790559254925192909116917f46262b692680f1907961b1c2f80ce936b0bc7d72985aec6c7d3d91dd79b113fd9190a2565b600054600160a060020a0316331461037b57600080fd5b60005474010000000000000000000000000000000000000000900460ff16156103a357600080fd5b6000805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001781556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff6259190a1565b600054600160a060020a031681565b60026020526000908152604090205460ff1681565b600154600160a060020a031681565b600054600160a060020a0316331461044b57600080fd5b6101d281600160a060020a038116151561046457600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a72305820f8349c65e2c3272887a5ab246de80484afac0936eb3c792605ba1b648e910bae0029",
  "deployedBytecode": "0x6080604052600436106100a35763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633659cfe681146100a85780633f4ba83a146100cb5780635c975abb146100e0578063715018a6146101095780638129fc1c1461011e5780638456cb59146101335780638da5cb5b14610148578063cbca47db14610179578063d4b839921461019a578063f2fde38b146101af575b600080fd5b3480156100b457600080fd5b506100c9600160a060020a03600435166101d0565b005b3480156100d757600080fd5b506100c96101d5565b3480156100ec57600080fd5b506100f561025c565b604080519115158252519081900360200190f35b34801561011557600080fd5b506100c961027d565b34801561012a57600080fd5b506100c96102e9565b34801561013f57600080fd5b506100c9610364565b34801561015457600080fd5b5061015d610401565b60408051600160a060020a039092168252519081900360200190f35b34801561018557600080fd5b506100f5600160a060020a0360043516610410565b3480156101a657600080fd5b5061015d610425565b3480156101bb57600080fd5b506100c9600160a060020a0360043516610434565bfe5b50565b600054600160a060020a031633146101ec57600080fd5b60005474010000000000000000000000000000000000000000900460ff16151561021557600080fd5b6000805474ff0000000000000000000000000000000000000000191681556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b339190a1565b60005474010000000000000000000000000000000000000000900460ff1681565b600054600160a060020a0316331461029457600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600154600160a060020a031660009081526002602052604090205460ff1615156100a35760018054600160a060020a03908116600090815260026020526040808220805460ff1916851790559254925192909116917f46262b692680f1907961b1c2f80ce936b0bc7d72985aec6c7d3d91dd79b113fd9190a2565b600054600160a060020a0316331461037b57600080fd5b60005474010000000000000000000000000000000000000000900460ff16156103a357600080fd5b6000805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001781556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff6259190a1565b600054600160a060020a031681565b60026020526000908152604090205460ff1681565b600154600160a060020a031681565b600054600160a060020a0316331461044b57600080fd5b6101d281600160a060020a038116151561046457600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a72305820f8349c65e2c3272887a5ab246de80484afac0936eb3c792605ba1b648e910bae0029",
  "sourceMap": "250:1572:4:-;;;268:5:9;247:26;;-1:-1:-1;;;;;;567:18:10;575:10;567:18;;;250:1572:4;;;;;;",
  "deployedSourceMap": "250:1572:4:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;827:65;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;827:65:4;-1:-1:-1;;;;;827:65:4;;;;;;;838:92:9;;8:9:-1;5:2;;;30:1;27;20:12;5:2;838:92:9;;;;247:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;247:26:9;;;;;;;;;;;;;;;;;;;;;;1001:111:10;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1001:111:10;;;;1713:107:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1713:107:4;;;;666:90:9;;8:9:-1;5:2;;;30:1;27;20:12;5:2;666:90:9;;;;238:20:10;;8:9:-1;5:2;;;30:1;27;20:12;5:2;238:20:10;;;;;;;;-1:-1:-1;;;;;238:20:10;;;;;;;;;;;;;;1123:44:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1123:44:2;-1:-1:-1;;;;;1123:44:2;;;;;1096:21;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1096:21:2;;;;1274:103:10;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1274:103:10;-1:-1:-1;;;;;1274:103:10;;;;;827:65:4;872:13;;827:65;:::o;838:92:9:-;719:5:10;;-1:-1:-1;;;;;719:5:10;705:10;:19;697:28;;;;;;568:6:9;;;;;;;560:15;;;;;;;;900:5;891:14;;-1:-1:-1;;891:14:9;;;916:9;;;;900:5;916:9;838:92::o;247:26::-;;;;;;;;;:::o;1001:111:10:-;719:5;;-1:-1:-1;;;;;719:5:10;705:10;:19;697:28;;;;;;1077:5;;;1058:25;;-1:-1:-1;;;;;1077:5:10;;;;1058:25;;;1105:1;1089:18;;-1:-1:-1;;1089:18:10;;;1001:111::o;1713:107:4:-;495:6;;-1:-1:-1;;;;;495:6:4;483:19;;;;:11;:19;;;;;;;;482:20;479:148;;;540:4;530:6;;-1:-1:-1;;;;;530:6:4;;;518:19;;;;:11;:19;;;;;;:26;;-1:-1:-1;;518:26:4;;;;;580:6;;563:24;;580:6;;;;;563:24;;518:19;563:24;1713:107::o;666:90:9:-;719:5:10;;-1:-1:-1;;;;;719:5:10;705:10;:19;697:28;;;;;;416:6:9;;;;;;;415:7;407:16;;;;;;720:6;:13;;-1:-1:-1;;720:13:9;;;;;744:7;;;;720:6;744:7;666:90::o;238:20:10:-;;;-1:-1:-1;;;;;238:20:10;;:::o;1123:44:2:-;;;;;;;;;;;;;;;:::o;1096:21::-;;;-1:-1:-1;;;;;1096:21:2;;:::o;1274:103:10:-;719:5;;-1:-1:-1;;;;;719:5:10;705:10;:19;697:28;;;;;;1343:29;1362:9;-1:-1:-1;;;;;1582:23:10;;;;1574:32;;;;;;1638:5;;;1617:38;;-1:-1:-1;;;;;1617:38:10;;;;1638:5;;;1617:38;;;1661:5;:17;;-1:-1:-1;;1661:17:10;-1:-1:-1;;;;;1661:17:10;;;;;;;;;;1512:171::o",
  "source": "pragma solidity 0.4.24;\n\nimport \"./PausableProxied.sol\";\n\n\n/*\n * @title PausableUpgradeable\n * @author Jack Tanner. Made pausable by Matheus Alencar.\n * @notice Original repo is here: https://github.com/jackandtheblockstalk/upgradeable-proxy\n * \n */\ncontract PausableUpgradeable is PausableProxied {\n    /*\n     * @notice Modifier to make body of function only execute if the contract has not already \n     * been initialized.\n     */\n    modifier initializeOnceOnly() {\n        if(!initialized[target]) {\n            initialized[target] = true;\n            emit EventInitialized(target);\n            _;\n        } else revert();\n    }\n\n    /**\n     * @notice Will always fail if called. This is used as a placeholder for the contract ABI.\n     * @dev This is code is never executed by the Proxy using delegate call\n     */\n    function upgradeTo(address) public {\n        assert(false);\n    }\n\n    /**\n     * @notice Initialize any state variables that would normally be set in the contructor.\n     * @dev Initialization functionality MUST be implemented in inherited upgradeable contract if the child contract requires\n     * variable initialization on creation. This is because the contructor of the child contract will not execute\n     * and set any state when the Proxy contract targets it.\n     * This function MUST be called stright after the Upgradeable contract is set as the target of the Proxy. This method\n     * can be overwridden so that it may have arguments. Make sure that the initializeOnceOnly() modifier is used to protect\n     * from being initialized more than once.\n     * If a contract is upgraded twice, pay special attention that the state variables are not initialized again\n     */\n    function initialize() public initializeOnceOnly {\n        // initialize contract state variables here\n    }\n}",
  "sourcePath": "/home/rigel/Documents/iuvo/contracts/PausableUpgradeable.sol",
  "ast": {
    "absolutePath": "/home/rigel/Documents/iuvo/contracts/PausableUpgradeable.sol",
    "exportedSymbols": {
      "PausableUpgradeable": [
        698
      ]
    },
    "id": 699,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 655,
        "literals": [
          "solidity",
          "0.4",
          ".24"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:4"
      },
      {
        "absolutePath": "/home/rigel/Documents/iuvo/contracts/PausableProxied.sol",
        "file": "./PausableProxied.sol",
        "id": 656,
        "nodeType": "ImportDirective",
        "scope": 699,
        "sourceUnit": 573,
        "src": "25:31:4",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 657,
              "name": "PausableProxied",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 572,
              "src": "282:15:4",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_PausableProxied_$572",
                "typeString": "contract PausableProxied"
              }
            },
            "id": 658,
            "nodeType": "InheritanceSpecifier",
            "src": "282:15:4"
          }
        ],
        "contractDependencies": [
          572,
          1517,
          1603
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 698,
        "linearizedBaseContracts": [
          698,
          572,
          1517,
          1603
        ],
        "name": "PausableUpgradeable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 680,
              "nodeType": "Block",
              "src": "469:165:4",
              "statements": [
                {
                  "condition": {
                    "argumentTypes": null,
                    "id": 663,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "482:20:4",
                    "subExpression": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 660,
                        "name": "initialized",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 554,
                        "src": "483:11:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 662,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 661,
                        "name": "target",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 550,
                        "src": "495:6:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "483:19:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "expression": {
                      "argumentTypes": null,
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 676,
                        "name": "revert",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [
                          1623,
                          1624
                        ],
                        "referencedDeclaration": 1623,
                        "src": "619:6:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_revert_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 677,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "619:8:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 678,
                    "nodeType": "ExpressionStatement",
                    "src": "619:8:4"
                  },
                  "id": 679,
                  "nodeType": "IfStatement",
                  "src": "479:148:4",
                  "trueBody": {
                    "id": 675,
                    "nodeType": "Block",
                    "src": "504:109:4",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 668,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 664,
                              "name": "initialized",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 554,
                              "src": "518:11:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                "typeString": "mapping(address => bool)"
                              }
                            },
                            "id": 666,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 665,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 550,
                              "src": "530:6:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "518:19:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "hexValue": "74727565",
                            "id": 667,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "540:4:4",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "518:26:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 669,
                        "nodeType": "ExpressionStatement",
                        "src": "518:26:4"
                      },
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 671,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 550,
                              "src": "580:6:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 670,
                            "name": "EventInitialized",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 566,
                            "src": "563:16:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 672,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "563:24:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 673,
                        "nodeType": "EmitStatement",
                        "src": "558:29:4"
                      },
                      {
                        "id": 674,
                        "nodeType": "PlaceholderStatement",
                        "src": "601:1:4"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": null,
            "id": 681,
            "name": "initializeOnceOnly",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 659,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "466:2:4"
            },
            "src": "439:195:4",
            "visibility": "internal"
          },
          {
            "body": {
              "id": 690,
              "nodeType": "Block",
              "src": "862:30:4",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "hexValue": "66616c7365",
                        "id": 687,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "879:5:4",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "false"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 686,
                      "name": "assert",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1607,
                      "src": "872:6:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 688,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "872:13:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 689,
                  "nodeType": "ExpressionStatement",
                  "src": "872:13:4"
                }
              ]
            },
            "documentation": "@notice Will always fail if called. This is used as a placeholder for the contract ABI.\n@dev This is code is never executed by the Proxy using delegate call",
            "id": 691,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "upgradeTo",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 684,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 683,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 691,
                  "src": "846:7:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 682,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "846:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "845:9:4"
            },
            "payable": false,
            "returnParameters": {
              "id": 685,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "862:0:4"
            },
            "scope": 698,
            "src": "827:65:4",
            "stateMutability": "nonpayable",
            "superFunction": 571,
            "visibility": "public"
          },
          {
            "body": {
              "id": 696,
              "nodeType": "Block",
              "src": "1761:59:4",
              "statements": []
            },
            "documentation": "@notice Initialize any state variables that would normally be set in the contructor.\n@dev Initialization functionality MUST be implemented in inherited upgradeable contract if the child contract requires\nvariable initialization on creation. This is because the contructor of the child contract will not execute\nand set any state when the Proxy contract targets it.\nThis function MUST be called stright after the Upgradeable contract is set as the target of the Proxy. This method\ncan be overwridden so that it may have arguments. Make sure that the initializeOnceOnly() modifier is used to protect\nfrom being initialized more than once.\nIf a contract is upgraded twice, pay special attention that the state variables are not initialized again",
            "id": 697,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [
              {
                "arguments": null,
                "id": 694,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 693,
                  "name": "initializeOnceOnly",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 681,
                  "src": "1742:18:4",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1742:18:4"
              }
            ],
            "name": "initialize",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 692,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1732:2:4"
            },
            "payable": false,
            "returnParameters": {
              "id": 695,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1761:0:4"
            },
            "scope": 698,
            "src": "1713:107:4",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 699,
        "src": "250:1572:4"
      }
    ],
    "src": "0:1822:4"
  },
  "legacyAST": {
    "absolutePath": "/home/rigel/Documents/iuvo/contracts/PausableUpgradeable.sol",
    "exportedSymbols": {
      "PausableUpgradeable": [
        698
      ]
    },
    "id": 699,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 655,
        "literals": [
          "solidity",
          "0.4",
          ".24"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:4"
      },
      {
        "absolutePath": "/home/rigel/Documents/iuvo/contracts/PausableProxied.sol",
        "file": "./PausableProxied.sol",
        "id": 656,
        "nodeType": "ImportDirective",
        "scope": 699,
        "sourceUnit": 573,
        "src": "25:31:4",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 657,
              "name": "PausableProxied",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 572,
              "src": "282:15:4",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_PausableProxied_$572",
                "typeString": "contract PausableProxied"
              }
            },
            "id": 658,
            "nodeType": "InheritanceSpecifier",
            "src": "282:15:4"
          }
        ],
        "contractDependencies": [
          572,
          1517,
          1603
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 698,
        "linearizedBaseContracts": [
          698,
          572,
          1517,
          1603
        ],
        "name": "PausableUpgradeable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 680,
              "nodeType": "Block",
              "src": "469:165:4",
              "statements": [
                {
                  "condition": {
                    "argumentTypes": null,
                    "id": 663,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "482:20:4",
                    "subExpression": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 660,
                        "name": "initialized",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 554,
                        "src": "483:11:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 662,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 661,
                        "name": "target",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 550,
                        "src": "495:6:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "483:19:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "expression": {
                      "argumentTypes": null,
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 676,
                        "name": "revert",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [
                          1623,
                          1624
                        ],
                        "referencedDeclaration": 1623,
                        "src": "619:6:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_revert_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 677,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "619:8:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 678,
                    "nodeType": "ExpressionStatement",
                    "src": "619:8:4"
                  },
                  "id": 679,
                  "nodeType": "IfStatement",
                  "src": "479:148:4",
                  "trueBody": {
                    "id": 675,
                    "nodeType": "Block",
                    "src": "504:109:4",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 668,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 664,
                              "name": "initialized",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 554,
                              "src": "518:11:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                "typeString": "mapping(address => bool)"
                              }
                            },
                            "id": 666,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 665,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 550,
                              "src": "530:6:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "518:19:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "hexValue": "74727565",
                            "id": 667,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "540:4:4",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "518:26:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 669,
                        "nodeType": "ExpressionStatement",
                        "src": "518:26:4"
                      },
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 671,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 550,
                              "src": "580:6:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 670,
                            "name": "EventInitialized",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 566,
                            "src": "563:16:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 672,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "563:24:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 673,
                        "nodeType": "EmitStatement",
                        "src": "558:29:4"
                      },
                      {
                        "id": 674,
                        "nodeType": "PlaceholderStatement",
                        "src": "601:1:4"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": null,
            "id": 681,
            "name": "initializeOnceOnly",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 659,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "466:2:4"
            },
            "src": "439:195:4",
            "visibility": "internal"
          },
          {
            "body": {
              "id": 690,
              "nodeType": "Block",
              "src": "862:30:4",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "hexValue": "66616c7365",
                        "id": 687,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "879:5:4",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "false"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 686,
                      "name": "assert",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1607,
                      "src": "872:6:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 688,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "872:13:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 689,
                  "nodeType": "ExpressionStatement",
                  "src": "872:13:4"
                }
              ]
            },
            "documentation": "@notice Will always fail if called. This is used as a placeholder for the contract ABI.\n@dev This is code is never executed by the Proxy using delegate call",
            "id": 691,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "upgradeTo",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 684,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 683,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 691,
                  "src": "846:7:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 682,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "846:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "845:9:4"
            },
            "payable": false,
            "returnParameters": {
              "id": 685,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "862:0:4"
            },
            "scope": 698,
            "src": "827:65:4",
            "stateMutability": "nonpayable",
            "superFunction": 571,
            "visibility": "public"
          },
          {
            "body": {
              "id": 696,
              "nodeType": "Block",
              "src": "1761:59:4",
              "statements": []
            },
            "documentation": "@notice Initialize any state variables that would normally be set in the contructor.\n@dev Initialization functionality MUST be implemented in inherited upgradeable contract if the child contract requires\nvariable initialization on creation. This is because the contructor of the child contract will not execute\nand set any state when the Proxy contract targets it.\nThis function MUST be called stright after the Upgradeable contract is set as the target of the Proxy. This method\ncan be overwridden so that it may have arguments. Make sure that the initializeOnceOnly() modifier is used to protect\nfrom being initialized more than once.\nIf a contract is upgraded twice, pay special attention that the state variables are not initialized again",
            "id": 697,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [
              {
                "arguments": null,
                "id": 694,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 693,
                  "name": "initializeOnceOnly",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 681,
                  "src": "1742:18:4",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1742:18:4"
              }
            ],
            "name": "initialize",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 692,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1732:2:4"
            },
            "payable": false,
            "returnParameters": {
              "id": 695,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1761:0:4"
            },
            "scope": 698,
            "src": "1713:107:4",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 699,
        "src": "250:1572:4"
      }
    ],
    "src": "0:1822:4"
  },
  "compiler": {
    "name": "solc",
    "version": "0.4.24+commit.e67f0147.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "2.0.1",
  "updatedAt": "2018-08-07T23:47:41.279Z"
}