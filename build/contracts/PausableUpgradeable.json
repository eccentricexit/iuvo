{
  "contractName": "PausableUpgradeable",
  "abi": [
    {
      "constant": false,
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "initialized",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "target",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "newTarget",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "oldTarget",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "EventUpgrade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "target",
          "type": "address"
        }
      ],
      "name": "EventInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Pause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Unpause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x608060405260008054600160a860020a0319163317905561051b806100256000396000f3006080604052600436106100985763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633659cfe6811461009d5780633f4ba83a146100cd5780635c975abb146100e25780638129fc1c1461010b5780638456cb59146101205780638da5cb5b14610135578063cbca47db14610173578063d4b83992146101a1578063f2fde38b146101b6575b600080fd5b3480156100a957600080fd5b506100cb73ffffffffffffffffffffffffffffffffffffffff600435166101e4565b005b3480156100d957600080fd5b506100cb6101e6565b3480156100ee57600080fd5b506100f761027a565b604080519115158252519081900360200190f35b34801561011757600080fd5b506100cb61029b565b34801561012c57600080fd5b506100cb610330565b34801561014157600080fd5b5061014a6103da565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561017f57600080fd5b506100f773ffffffffffffffffffffffffffffffffffffffff600435166103f6565b3480156101ad57600080fd5b5061014a61040b565b3480156101c257600080fd5b506100cb73ffffffffffffffffffffffffffffffffffffffff60043516610427565bfe5b60005473ffffffffffffffffffffffffffffffffffffffff16331461020a57600080fd5b60005474010000000000000000000000000000000000000000900460ff16151561023357600080fd5b6000805474ff0000000000000000000000000000000000000000191681556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b339190a1565b60005474010000000000000000000000000000000000000000900460ff1681565b60015473ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205460ff161515610098576001805473ffffffffffffffffffffffffffffffffffffffff908116600090815260026020526040808220805460ff1916851790559254925192909116917f46262b692680f1907961b1c2f80ce936b0bc7d72985aec6c7d3d91dd79b113fd9190a2565b60005473ffffffffffffffffffffffffffffffffffffffff16331461035457600080fd5b60005474010000000000000000000000000000000000000000900460ff161561037c57600080fd5b6000805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001781556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff6259190a1565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60026020526000908152604090205460ff1681565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff16331461044b57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8116151561046d57600080fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff191673ffffffffffffffffffffffffffffffffffffffff929092169190911790555600a165627a7a723058200a2d452fb697656c0ced94ced9c0550001bbdcd900fc0516e1cb59cc6d23f3590029",
  "deployedBytecode": "0x6080604052600436106100985763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633659cfe6811461009d5780633f4ba83a146100cd5780635c975abb146100e25780638129fc1c1461010b5780638456cb59146101205780638da5cb5b14610135578063cbca47db14610173578063d4b83992146101a1578063f2fde38b146101b6575b600080fd5b3480156100a957600080fd5b506100cb73ffffffffffffffffffffffffffffffffffffffff600435166101e4565b005b3480156100d957600080fd5b506100cb6101e6565b3480156100ee57600080fd5b506100f761027a565b604080519115158252519081900360200190f35b34801561011757600080fd5b506100cb61029b565b34801561012c57600080fd5b506100cb610330565b34801561014157600080fd5b5061014a6103da565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561017f57600080fd5b506100f773ffffffffffffffffffffffffffffffffffffffff600435166103f6565b3480156101ad57600080fd5b5061014a61040b565b3480156101c257600080fd5b506100cb73ffffffffffffffffffffffffffffffffffffffff60043516610427565bfe5b60005473ffffffffffffffffffffffffffffffffffffffff16331461020a57600080fd5b60005474010000000000000000000000000000000000000000900460ff16151561023357600080fd5b6000805474ff0000000000000000000000000000000000000000191681556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b339190a1565b60005474010000000000000000000000000000000000000000900460ff1681565b60015473ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205460ff161515610098576001805473ffffffffffffffffffffffffffffffffffffffff908116600090815260026020526040808220805460ff1916851790559254925192909116917f46262b692680f1907961b1c2f80ce936b0bc7d72985aec6c7d3d91dd79b113fd9190a2565b60005473ffffffffffffffffffffffffffffffffffffffff16331461035457600080fd5b60005474010000000000000000000000000000000000000000900460ff161561037c57600080fd5b6000805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001781556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff6259190a1565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60026020526000908152604090205460ff1681565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff16331461044b57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8116151561046d57600080fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff191673ffffffffffffffffffffffffffffffffffffffff929092169190911790555600a165627a7a723058200a2d452fb697656c0ced94ced9c0550001bbdcd900fc0516e1cb59cc6d23f3590029",
  "sourceMap": "250:1572:2:-;;;268:5:7;247:26;;-1:-1:-1;;;;;;494:18:9;502:10;494:18;;;250:1572:2;;;;;;",
  "deployedSourceMap": "250:1572:2:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;827:65;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;827:65:2;;;;;;;;;833:87:7;;8:9:-1;5:2;;;30:1;27;20:12;5:2;833:87:7;;;;247:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;247:26:7;;;;;;;;;;;;;;;;;;;;;;1713:107:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1713:107:2;;;;666:85:7;;8:9:-1;5:2;;;30:1;27;20:12;5:2;666:85:7;;;;238:20:9;;8:9:-1;5:2;;;30:1;27;20:12;5:2;238:20:9;;;;;;;;;;;;;;;;;;;;;;;1110:44:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1110:44:1;;;;;;;1083:21;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1083:21:1;;;;827:169:9;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;827:169:9;;;;;;;:65:2;872:13;833:87:7;647:5:9;;;;633:10;:19;625:28;;;;;;568:6:7;;;;;;;560:15;;;;;;;;895:5;886:14;;-1:-1:-1;;886:14:7;;;906:9;;;;895:5;906:9;833:87::o;247:26::-;;;;;;;;;:::o;1713:107:2:-;495:6;;;;483:19;;;;:11;:19;;;;;;;;482:20;479:148;;;540:4;530:6;;;;;;518:19;;;;:11;:19;;;;;;:26;;-1:-1:-1;;518:26:2;;;;;580:6;;563:24;;580:6;;;;;563:24;;518:19;563:24;1713:107::o;666:85:7:-;647:5:9;;;;633:10;:19;625:28;;;;;;416:6:7;;;;;;;415:7;407:16;;;;;;720:6;:13;;-1:-1:-1;;720:13:7;;;;;739:7;;;;720:6;739:7;666:85::o;238:20:9:-;;;;;;:::o;1110:44:1:-;;;;;;;;;;;;;;;:::o;1083:21::-;;;;;;:::o;827:169:9:-;647:5;;;;633:10;:19;625:28;;;;;;903:22;;;;;895:31;;;;;;953:5;;;932:37;;;;;;;953:5;;;932:37;;;975:5;:16;;-1:-1:-1;;975:16:9;;;;;;;;;;;;827:169::o",
  "source": "pragma solidity 0.4.24;\n\nimport \"./PausableProxied.sol\";\n\n\n/*\n * @title PausableUpgradeable\n * @author Jack Tanner. Made pausable by Matheus Alencar.\n * @notice Original repo is here: https://github.com/jackandtheblockstalk/upgradeable-proxy\n * \n */\ncontract PausableUpgradeable is PausableProxied {\n    /*\n     * @notice Modifier to make body of function only execute if the contract has not already \n     * been initialized.\n     */\n    modifier initializeOnceOnly() {\n        if(!initialized[target]) {\n            initialized[target] = true;\n            emit EventInitialized(target);\n            _;\n        } else revert();\n    }\n\n    /**\n     * @notice Will always fail if called. This is used as a placeholder for the contract ABI.\n     * @dev This is code is never executed by the Proxy using delegate call\n     */\n    function upgradeTo(address) public {\n        assert(false);\n    }\n\n    /**\n     * @notice Initialize any state variables that would normally be set in the contructor.\n     * @dev Initialization functionality MUST be implemented in inherited upgradeable contract if the child contract requires\n     * variable initialization on creation. This is because the contructor of the child contract will not execute\n     * and set any state when the Proxy contract targets it.\n     * This function MUST be called stright after the Upgradeable contract is set as the target of the Proxy. This method\n     * can be overwridden so that it may have arguments. Make sure that the initializeOnceOnly() modifier is used to protect\n     * from being initialized more than once.\n     * If a contract is upgraded twice, pay special attention that the state variables are not initialized again\n     */\n    function initialize() public initializeOnceOnly {\n        // initialize contract state variables here\n    }\n}",
  "sourcePath": "/home/ubuntu/workspace/iuvo/contracts/PausableUpgradeable.sol",
  "ast": {
    "absolutePath": "/home/ubuntu/workspace/iuvo/contracts/PausableUpgradeable.sol",
    "exportedSymbols": {
      "PausableUpgradeable": [
        564
      ]
    },
    "id": 565,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 521,
        "literals": [
          "solidity",
          "0.4",
          ".24"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:2"
      },
      {
        "absolutePath": "/home/ubuntu/workspace/iuvo/contracts/PausableProxied.sol",
        "file": "./PausableProxied.sol",
        "id": 522,
        "nodeType": "ImportDirective",
        "scope": 565,
        "sourceUnit": 520,
        "src": "25:31:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 523,
              "name": "PausableProxied",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 519,
              "src": "282:15:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_PausableProxied_$519",
                "typeString": "contract PausableProxied"
              }
            },
            "id": 524,
            "nodeType": "InheritanceSpecifier",
            "src": "282:15:2"
          }
        ],
        "contractDependencies": [
          519,
          1383,
          1534
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 564,
        "linearizedBaseContracts": [
          564,
          519,
          1383,
          1534
        ],
        "name": "PausableUpgradeable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 546,
              "nodeType": "Block",
              "src": "469:165:2",
              "statements": [
                {
                  "condition": {
                    "argumentTypes": null,
                    "id": 529,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "482:20:2",
                    "subExpression": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 526,
                        "name": "initialized",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 501,
                        "src": "483:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 528,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 527,
                        "name": "target",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 497,
                        "src": "495:6:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "483:19:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "expression": {
                      "argumentTypes": null,
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 542,
                        "name": "revert",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [
                          1554,
                          1555
                        ],
                        "referencedDeclaration": 1554,
                        "src": "619:6:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_revert_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 543,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "619:8:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 544,
                    "nodeType": "ExpressionStatement",
                    "src": "619:8:2"
                  },
                  "id": 545,
                  "nodeType": "IfStatement",
                  "src": "479:148:2",
                  "trueBody": {
                    "id": 541,
                    "nodeType": "Block",
                    "src": "504:109:2",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 534,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 530,
                              "name": "initialized",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 501,
                              "src": "518:11:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                "typeString": "mapping(address => bool)"
                              }
                            },
                            "id": 532,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 531,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 497,
                              "src": "530:6:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "518:19:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "hexValue": "74727565",
                            "id": 533,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "540:4:2",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "518:26:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 535,
                        "nodeType": "ExpressionStatement",
                        "src": "518:26:2"
                      },
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 537,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 497,
                              "src": "580:6:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 536,
                            "name": "EventInitialized",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 513,
                            "src": "563:16:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 538,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "563:24:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 539,
                        "nodeType": "EmitStatement",
                        "src": "558:29:2"
                      },
                      {
                        "id": 540,
                        "nodeType": "PlaceholderStatement",
                        "src": "601:1:2"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": null,
            "id": 547,
            "name": "initializeOnceOnly",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 525,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "466:2:2"
            },
            "src": "439:195:2",
            "visibility": "internal"
          },
          {
            "body": {
              "id": 556,
              "nodeType": "Block",
              "src": "862:30:2",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "hexValue": "66616c7365",
                        "id": 553,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "879:5:2",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "false"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 552,
                      "name": "assert",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1538,
                      "src": "872:6:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 554,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "872:13:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 555,
                  "nodeType": "ExpressionStatement",
                  "src": "872:13:2"
                }
              ]
            },
            "documentation": "@notice Will always fail if called. This is used as a placeholder for the contract ABI.\n@dev This is code is never executed by the Proxy using delegate call",
            "id": 557,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "upgradeTo",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 550,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 549,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 557,
                  "src": "846:7:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 548,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "846:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "845:9:2"
            },
            "payable": false,
            "returnParameters": {
              "id": 551,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "862:0:2"
            },
            "scope": 564,
            "src": "827:65:2",
            "stateMutability": "nonpayable",
            "superFunction": 518,
            "visibility": "public"
          },
          {
            "body": {
              "id": 562,
              "nodeType": "Block",
              "src": "1761:59:2",
              "statements": []
            },
            "documentation": "@notice Initialize any state variables that would normally be set in the contructor.\n@dev Initialization functionality MUST be implemented in inherited upgradeable contract if the child contract requires\nvariable initialization on creation. This is because the contructor of the child contract will not execute\nand set any state when the Proxy contract targets it.\nThis function MUST be called stright after the Upgradeable contract is set as the target of the Proxy. This method\ncan be overwridden so that it may have arguments. Make sure that the initializeOnceOnly() modifier is used to protect\nfrom being initialized more than once.\nIf a contract is upgraded twice, pay special attention that the state variables are not initialized again",
            "id": 563,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [
              {
                "arguments": null,
                "id": 560,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 559,
                  "name": "initializeOnceOnly",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 547,
                  "src": "1742:18:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1742:18:2"
              }
            ],
            "name": "initialize",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 558,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1732:2:2"
            },
            "payable": false,
            "returnParameters": {
              "id": 561,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1761:0:2"
            },
            "scope": 564,
            "src": "1713:107:2",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 565,
        "src": "250:1572:2"
      }
    ],
    "src": "0:1822:2"
  },
  "legacyAST": {
    "absolutePath": "/home/ubuntu/workspace/iuvo/contracts/PausableUpgradeable.sol",
    "exportedSymbols": {
      "PausableUpgradeable": [
        564
      ]
    },
    "id": 565,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 521,
        "literals": [
          "solidity",
          "0.4",
          ".24"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:2"
      },
      {
        "absolutePath": "/home/ubuntu/workspace/iuvo/contracts/PausableProxied.sol",
        "file": "./PausableProxied.sol",
        "id": 522,
        "nodeType": "ImportDirective",
        "scope": 565,
        "sourceUnit": 520,
        "src": "25:31:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 523,
              "name": "PausableProxied",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 519,
              "src": "282:15:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_PausableProxied_$519",
                "typeString": "contract PausableProxied"
              }
            },
            "id": 524,
            "nodeType": "InheritanceSpecifier",
            "src": "282:15:2"
          }
        ],
        "contractDependencies": [
          519,
          1383,
          1534
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 564,
        "linearizedBaseContracts": [
          564,
          519,
          1383,
          1534
        ],
        "name": "PausableUpgradeable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 546,
              "nodeType": "Block",
              "src": "469:165:2",
              "statements": [
                {
                  "condition": {
                    "argumentTypes": null,
                    "id": 529,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "482:20:2",
                    "subExpression": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 526,
                        "name": "initialized",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 501,
                        "src": "483:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 528,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 527,
                        "name": "target",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 497,
                        "src": "495:6:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "483:19:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "expression": {
                      "argumentTypes": null,
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 542,
                        "name": "revert",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [
                          1554,
                          1555
                        ],
                        "referencedDeclaration": 1554,
                        "src": "619:6:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_revert_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 543,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "619:8:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 544,
                    "nodeType": "ExpressionStatement",
                    "src": "619:8:2"
                  },
                  "id": 545,
                  "nodeType": "IfStatement",
                  "src": "479:148:2",
                  "trueBody": {
                    "id": 541,
                    "nodeType": "Block",
                    "src": "504:109:2",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 534,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 530,
                              "name": "initialized",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 501,
                              "src": "518:11:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                "typeString": "mapping(address => bool)"
                              }
                            },
                            "id": 532,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 531,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 497,
                              "src": "530:6:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "518:19:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "hexValue": "74727565",
                            "id": 533,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "540:4:2",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "518:26:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 535,
                        "nodeType": "ExpressionStatement",
                        "src": "518:26:2"
                      },
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 537,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 497,
                              "src": "580:6:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 536,
                            "name": "EventInitialized",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 513,
                            "src": "563:16:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 538,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "563:24:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 539,
                        "nodeType": "EmitStatement",
                        "src": "558:29:2"
                      },
                      {
                        "id": 540,
                        "nodeType": "PlaceholderStatement",
                        "src": "601:1:2"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": null,
            "id": 547,
            "name": "initializeOnceOnly",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 525,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "466:2:2"
            },
            "src": "439:195:2",
            "visibility": "internal"
          },
          {
            "body": {
              "id": 556,
              "nodeType": "Block",
              "src": "862:30:2",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "hexValue": "66616c7365",
                        "id": 553,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "879:5:2",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "false"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 552,
                      "name": "assert",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1538,
                      "src": "872:6:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 554,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "872:13:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 555,
                  "nodeType": "ExpressionStatement",
                  "src": "872:13:2"
                }
              ]
            },
            "documentation": "@notice Will always fail if called. This is used as a placeholder for the contract ABI.\n@dev This is code is never executed by the Proxy using delegate call",
            "id": 557,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "upgradeTo",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 550,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 549,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 557,
                  "src": "846:7:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 548,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "846:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "845:9:2"
            },
            "payable": false,
            "returnParameters": {
              "id": 551,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "862:0:2"
            },
            "scope": 564,
            "src": "827:65:2",
            "stateMutability": "nonpayable",
            "superFunction": 518,
            "visibility": "public"
          },
          {
            "body": {
              "id": 562,
              "nodeType": "Block",
              "src": "1761:59:2",
              "statements": []
            },
            "documentation": "@notice Initialize any state variables that would normally be set in the contructor.\n@dev Initialization functionality MUST be implemented in inherited upgradeable contract if the child contract requires\nvariable initialization on creation. This is because the contructor of the child contract will not execute\nand set any state when the Proxy contract targets it.\nThis function MUST be called stright after the Upgradeable contract is set as the target of the Proxy. This method\ncan be overwridden so that it may have arguments. Make sure that the initializeOnceOnly() modifier is used to protect\nfrom being initialized more than once.\nIf a contract is upgraded twice, pay special attention that the state variables are not initialized again",
            "id": 563,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [
              {
                "arguments": null,
                "id": 560,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 559,
                  "name": "initializeOnceOnly",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 547,
                  "src": "1742:18:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1742:18:2"
              }
            ],
            "name": "initialize",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 558,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1732:2:2"
            },
            "payable": false,
            "returnParameters": {
              "id": 561,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1761:0:2"
            },
            "scope": 564,
            "src": "1713:107:2",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 565,
        "src": "250:1572:2"
      }
    ],
    "src": "0:1822:2"
  },
  "compiler": {
    "name": "solc",
    "version": "0.4.24+commit.e67f0147.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "2.0.1",
  "updatedAt": "2018-08-10T13:33:35.934Z"
}